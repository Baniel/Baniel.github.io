<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4001/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4001/" rel="alternate" type="text/html" /><updated>2019-02-25T12:06:30+11:00</updated><id>http://localhost:4001/feed.xml</id><title type="html">Daniel Tech Blog</title><subtitle>Daniel Tech Blog</subtitle><author><name>Daniel Zhang</name></author><entry><title type="html">Scala Big Data Tutorial 0x02</title><link href="http://localhost:4001/notes/Scala_Big_Data_0x02/" rel="alternate" type="text/html" title="Scala Big Data Tutorial 0x02" /><published>2019-02-25T00:00:00+11:00</published><updated>2019-02-25T00:00:00+11:00</updated><id>http://localhost:4001/notes/Scala_Big_Data_0x02</id><content type="html" xml:base="http://localhost:4001/notes/Scala_Big_Data_0x02/">&lt;p&gt;&lt;img src=&quot;../../assets/images/scala_bigdata.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def 方法名(参数名:参数类型): 返回值类型 = {
  // 括号内的叫做方法体

  // 方法体内的最后一行为返回值，不需要使用 return
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def add(x: Int, y:Int): Int = {
  x + y //最后一行就是返回值，不需要return
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def three() = 1 + 2

println(three())
println(three) // 没有入参的函数，调用时括号是可以省略的
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Daniel Zhang</name></author><category term="notes" /><summary type="html"></summary></entry><entry><title type="html">Scala Big Data Tutorial 0x01</title><link href="http://localhost:4001/notes/Scala_Big_Data_0x01/" rel="alternate" type="text/html" title="Scala Big Data Tutorial 0x01" /><published>2019-02-24T00:00:00+11:00</published><updated>2019-02-24T00:00:00+11:00</updated><id>http://localhost:4001/notes/Scala_Big_Data_0x01</id><content type="html" xml:base="http://localhost:4001/notes/Scala_Big_Data_0x01/">&lt;p&gt;&lt;img src=&quot;../../assets/images/scala_bigdata.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;java-vs-scala&quot;&gt;Java Vs Scala&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Java: (It should add “;”)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; public class HelloWorld {
   public static void main(String[] args){
     System.out.println(&quot;Hello World...&quot;);
   }
 }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Scala: (No Static)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;object HelloWorld {
  def main(args: Array[String]){
    println(&quot;Hello World...&quot;)
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;val-vs-var-值改变的时候就用var&quot;&gt;val vs var (值改变的时候就用var)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;val: value
    &lt;ul&gt;
      &lt;li&gt;final (immutable)&lt;/li&gt;
      &lt;li&gt;val (value name):(Type) = xxx&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;var: variable
    &lt;ul&gt;
      &lt;li&gt;mutable&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;data-types&quot;&gt;Data Types&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; val d = 1.1
d: Double = 1.1

scala&amp;gt; val e:Float = 1.1
&amp;lt;console&amp;gt;:11: error: type mismatch;
 found   : Double(1.1)
 required: Float
       val e:Float = 1.1
                     ^

scala&amp;gt; val e:Float = 1.1f
e: Float = 1.1

scala&amp;gt; val d = 1.2f
d: Float = 1.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; val f = 10
f: Int = 10

scala&amp;gt; val g = 10.asInstanceOf[Double]
g: Double = 10.0

scala&amp;gt; g
res75: Double = 10.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; val h = 10.isInstanceOf[Int]
h: Boolean = true


scala&amp;gt; val h = 10.isInstanceOf[Double]
h: Boolean = false

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;lazy-network-computing&quot;&gt;Lazy (Network Computing)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; val i = 1
i: Int = 1

scala&amp;gt; lazy val a =1
a: Int = &amp;lt;lazy&amp;gt;

When you are using the value,
it just computes the value.

scala&amp;gt; a
res76: Int = 1

When you are not using the lazy value,
even it's such a wrong operation,
but it will not report an error.


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Rich The Kid - Plug Walk&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/Xq-DkTnBZrk&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Daniel Zhang</name></author><category term="notes" /><summary type="html"></summary></entry><entry><title type="html">Java Interview Redis:0x04</title><link href="http://localhost:4001/notes/Java_Interview_Redis/" rel="alternate" type="text/html" title="Java Interview Redis:0x04" /><published>2019-02-24T00:00:00+11:00</published><updated>2019-02-24T00:00:00+11:00</updated><id>http://localhost:4001/notes/Java_Interview_Redis</id><content type="html" xml:base="http://localhost:4001/notes/Java_Interview_Redis/">&lt;p&gt;&lt;img src=&quot;../../assets/images/JavaInterview.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;data-types&quot;&gt;Data Types&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Hash: String 元素组成的字典，适合用于储存对象
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; hmset lilei name &quot;LiLei&quot; age 26 title &quot;Senior&quot;
OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; hget lilei age
&quot;26&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; hget lilei title
&quot;Senior&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; hset lilei title &quot;Pricipal&quot;
(integer) 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; hget lilei title
&quot;Pricipal&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;List: 列表，按照String元素插入顺序排序&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; lpush mylist aaa
(integer) 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; lpush mylist bbb
(integer) 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; lpush mylist ccc
(integer) 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;取出的顺序是从后到前，类似栈

127.0.0.1:6379&amp;gt; lrange mylist 0 10
1) &quot;ccc&quot;
2) &quot;bbb&quot;
3) &quot;aaa&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Set: String 元素组成的无序集合，通过哈希表实现，不允许重复&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;(integer) 1 : 表示添加成功&lt;/li&gt;
      &lt;li&gt;(integer) 2 : 表示添加失败&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; sadd myset 111
(integer) 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; sadd myset 222
(integer) 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; sadd myset 333
(integer) 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; sadd myset 222
(integer) 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; smembers myset
1) &quot;111&quot;
2) &quot;222&quot;
3) &quot;333&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; sadd myset abc
(integer) 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; sadd myset abd
(integer) 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; sadd myset abb
(integer) 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; sadd myset abd
(integer) 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; smembers myset
1) &quot;222&quot;
2) &quot;333&quot;
3) &quot;111&quot;
4) &quot;abb&quot;
5) &quot;abc&quot;
6) &quot;abd&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Sorted Set : 通过分数来为集合中的成员进行从小到大的排序&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; zadd myzset 3 abc
(integer) 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; zadd myzset 1 abd
(integer) 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; zadd myzset 2 abb
(integer) 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; zadd myzset 2 abb
(integer) 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; zadd myzset 1 bgg
(integer) 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; zrangebyscore myzset 0 10
1) &quot;abd&quot;
2) &quot;bgg&quot;
3) &quot;abb&quot;
4) &quot;abc&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;String : 最基本的数据类型，二进制安全&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; set name &quot;redis&quot;
OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; get name
&quot;redis&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; set name &quot;memcache&quot;
OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; get name
&quot;memcache&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; get &quot;memcache&quot;
(nil)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; set count 1
OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; get count
&quot;1&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; incr count
(integer) 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; get count
&quot;2&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; get count
&quot;2&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;用于计数的HyperLogLog, 用于支持存储地理位置信息的Geo (Learn by yourself, OK!
Cause we are genius!!!)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;底层数据类型基础&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;简单动态字符串&lt;/li&gt;
      &lt;li&gt;链表&lt;/li&gt;
      &lt;li&gt;字典&lt;/li&gt;
      &lt;li&gt;跳跃表&lt;/li&gt;
      &lt;li&gt;整数集合&lt;/li&gt;
      &lt;li&gt;压缩列表&lt;/li&gt;
      &lt;li&gt;对象&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Lil Pump - “Be Like Me” ft. Lil Wayne (Official Music Video)&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&quot;957&quot; height=&quot;538&quot; src=&quot;https://www.youtube.com/embed/gJRGkvNqrY4&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Daniel Zhang</name></author><category term="notes" /><summary type="html"></summary></entry><entry><title type="html">Java Interview Database:0x03</title><link href="http://localhost:4001/notes/Java_Interview_Database/" rel="alternate" type="text/html" title="Java Interview Database:0x03" /><published>2019-02-23T00:00:00+11:00</published><updated>2019-02-23T00:00:00+11:00</updated><id>http://localhost:4001/notes/Java_Interview_Database</id><content type="html" xml:base="http://localhost:4001/notes/Java_Interview_Database/">&lt;p&gt;&lt;img src=&quot;../../assets/images/JavaInterview.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;relational-database&quot;&gt;Relational database&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;How to design a Relational Database?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;RDBMS :
    &lt;ul&gt;
      &lt;li&gt;Application instance:
        &lt;ol&gt;
          &lt;li&gt;Storage Management&lt;/li&gt;
          &lt;li&gt;Cache&lt;/li&gt;
          &lt;li&gt;SQL Parsing&lt;/li&gt;
          &lt;li&gt;Log Management&lt;/li&gt;
          &lt;li&gt;Permission Plan&lt;/li&gt;
          &lt;li&gt;Disaster-tolerant Mechanism&lt;/li&gt;
          &lt;li&gt;Index Management&lt;/li&gt;
          &lt;li&gt;Lock Management&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;Storage (File System):&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Index : Why do we should use Index? (To avoid “Full Table Scan”)&lt;/li&gt;
  &lt;li&gt;Index Data Structure:
    &lt;ul&gt;
      &lt;li&gt;Binary Tree -&amp;gt; Binary Search&lt;/li&gt;
      &lt;li&gt;B Tree&lt;/li&gt;
      &lt;li&gt;B+ Tree&lt;/li&gt;
      &lt;li&gt;Hash Map&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;21 Savage - a lot ft. J. Cole&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&quot;728&quot; height=&quot;541&quot; src=&quot;https://www.youtube.com/embed/DmWWqogr_r8&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Daniel Zhang</name></author><category term="notes" /><summary type="html"></summary></entry><entry><title type="html">Scala Tutorial Imooc</title><link href="http://localhost:4001/notes/Scala_Imooc/" rel="alternate" type="text/html" title="Scala Tutorial Imooc" /><published>2019-02-02T00:00:00+11:00</published><updated>2019-02-02T00:00:00+11:00</updated><id>http://localhost:4001/notes/Scala_Imooc</id><content type="html" xml:base="http://localhost:4001/notes/Scala_Imooc/">&lt;p&gt;&lt;img src=&quot;../../assets/images/scala_tutorial.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1list&quot;&gt;1.List&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; val a = List(1,2,3,4)
a: List[Int] = List(1, 2, 3, 4)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; val b = 0 :: a
b: List[Int] = List(0, 1, 2, 3, 4)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; val c = &quot;x&quot; :: &quot;y&quot; :: &quot;z&quot; ::  Nil
c: List[String] = List(x, y, z)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; &quot;z&quot; :: Nil
res0: List[String] = List(z)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; &quot;x&quot; :: res0
res2: List[String] = List(x, z)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; val d = a ::: c
d: List[Any] = List(1, 2, 3, 4, x, y, z)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; a.head
res3: Int = 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; d.head
res4: Any = 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; c.head
res5: String = x
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; a.tail
res6: List[Int] = List(2, 3, 4)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; c.tail
res7: List[String] = List(y, z)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; a.isEmpty
res8: Boolean = false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; c.isEmpty
res9: Boolean = false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; Nil.isEmpty
res10: Boolean = true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;用递归和取头元素来写一个 List 遍历函数&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; def walkthru(l: List[Int]): String = {
     | if(l.isEmpty) &quot;&quot;
     | else l.head.toString + &quot; &quot; + walkthru(l.tail)
     | }
walkthru: (l: List[Int])String

scala&amp;gt; walkthru(a)
res11: String = &quot;1 2 3 4 &quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;2filter-函数&quot;&gt;2.Filter 函数&lt;/h1&gt;
&lt;hr /&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; a.filter(x =&amp;gt; x % 2 ==1)
res12: List[Int] = List(1, 3)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;把字符串变成char的List
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; &quot;99 Red Ballons&quot;.toList
res13: List[Char] = List(9, 9,  , R, e, d,  , B, a, l, l, o, n, s)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; &quot;99 Red Ballons&quot;.toList.filter(x =&amp;gt; Character.isDigit(x))
res15: List[Char] = List(9, 9)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; &quot;99 Red Ballons&quot;.toList.takeWhile(x =&amp;gt; x != 'B')
res16: List[Char] = List(9, 9,  , R, e, d,  )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;3map-函数&quot;&gt;3.Map 函数&lt;/h1&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; c.map(x =&amp;gt; x.toUpperCase)
res18: List[String] = List(X, Y, Z)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; c.map( _.toUpperCase)
res22: List[String] = List(X, Y, Z)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; a.filter ( _ % 2 == 1)
res23: List[Int] = List(1, 3)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; a.filter ( _ % 2 == 1).map( _ + 10)
res24: List[Int] = List(11, 13)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; val q = List( a, List(4, 5, 6))
q: List[List[Int]] = List(List(1, 2, 3, 4), List(4, 5, 6))

scala&amp;gt; q.map(x =&amp;gt; x.filter( _ % 2 == 0))
res25: List[List[Int]] = List(List(2, 4), List(4, 6))

scala&amp;gt; q.map( _.filter( _ % 2 == 0))
res26: List[List[Int]] = List(List(2, 4), List(4, 6))

scala&amp;gt; q.flatMap( _.filter( _ % 2 == 0))
res27: List[Int] = List(2, 4, 4, 6)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;4reduceleft-与-flodleft-规约&quot;&gt;4.reduceLeft 与 flodLeft (规约)&lt;/h1&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;ReduceLeft&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; a
res28: List[Int] = List(1, 2, 3, 4)

scala&amp;gt; a.reduceLeft((x,y) =&amp;gt; x + y)
res29: Int = 10

scala&amp;gt; a.reduceLeft(_ + _)
res30: Int = 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;FlodLeft&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; a
res33: List[Int] = List(1, 2, 3, 4)

scala&amp;gt; a.foldLeft(0)(_ + _)
res35: Int = 10

scala&amp;gt; a.foldLeft(1)(_ * _)
res36: Int = 24

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;5range-与-stream&quot;&gt;5.Range 与 Stream&lt;/h1&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Range&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; 1 to 10
res37: scala.collection.immutable.Range.Inclusive = Range 1 to 10

scala&amp;gt; 1 to 10 by 2
res39: scala.collection.immutable.Range = inexact Range 1 to 10 by 2

scala&amp;gt; (1 to 10).toList
res40: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

scala&amp;gt; 1 until 10
res41: scala.collection.immutable.Range = Range 1 until 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Stream&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; 1 #:: 2 #:: 3 #:: Stream.empty
res44: scala.collection.immutable.Stream[Int] = Stream(1, ?)

scala&amp;gt; val stream = (1 to 10000000).toStream
stream: scala.collection.immutable.Stream[Int] = Stream(1, ?)

scala&amp;gt; stream.head
res45: Int = 1

scala&amp;gt; stream.tail
res46: scala.collection.immutable.Stream[Int] = Stream(2, ?)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;6tuple与map&quot;&gt;6.tuple与map&lt;/h1&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;tuple&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; (1,2)
res48: (Int, Int) = (1,2)

scala&amp;gt; 1 -&amp;gt; 2
res49: (Int, Int) = (1,2)

scala&amp;gt; (1, &quot;Alice&quot;, &quot;Math&quot;, 95.5)
res50: (Int, String, String, Double) = (1,Alice,Math,95.5)

scala&amp;gt; val t =  (1, &quot;Alice&quot;, &quot;Math&quot;, 95.5)
t: (Int, String, String, Double) = (1,Alice,Math,95.5)

scala&amp;gt; t._1
res51: Int = 1

scala&amp;gt; t._2
res52: String = Alice

scala&amp;gt; t._3
res53: String = Math

scala&amp;gt; t._4
res54: Double = 95.5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; def sumSq(in : List[Int]): (Int, Int, Int) = {
     | in.foldLeft((0,0,0))((t,v) =&amp;gt; (t._1 + 1, t._2 + v, t._3 + v*v))
     | }
sumSq: (in: List[Int])(Int, Int, Int)

scala&amp;gt; sumSq(a)
res56: (Int, Int, Int) = (4,10,30)

scala&amp;gt; a
res57: List[Int] = List(1, 2, 3, 4)

scala&amp;gt; sumSq(a)
res58: (Int, Int, Int) = (4,10,30)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Map&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; val p = Map( 1 -&amp;gt; &quot;David&quot;, 9 -&amp;gt; &quot;Elwood&quot;)
p: scala.collection.immutable.Map[Int,String] = Map(1 -&amp;gt; David, 9 -&amp;gt; Elwood)

scala&amp;gt; p(1)
res59: String = David

scala&amp;gt; p(9)
res60: String = Elwood

scala&amp;gt; p(2)
java.util.NoSuchElementException: key not found: 2
  at scala.collection.immutable.Map$Map2.apply(Map.scala:138)
  ... 28 elided

scala&amp;gt; p.contains(1)
res62: Boolean = true

scala&amp;gt; p.contains(2)
res63: Boolean = false

scala&amp;gt; p.keys
res64: Iterable[Int] = Set(1, 9)

scala&amp;gt; p.values
res65: Iterable[String] = MapLike.DefaultValuesIterable(David, Elwood)

scala&amp;gt; p + (8 -&amp;gt; &quot;Archer&quot;)
res66: scala.collection.immutable.Map[Int,String] = Map(1 -&amp;gt; David, 9 -&amp;gt; Elwood, 8 -&amp;gt; Archer)

scala&amp;gt; p
res67: scala.collection.immutable.Map[Int,String] = Map(1 -&amp;gt; David, 9 -&amp;gt; Elwood)

scala&amp;gt; p - 1
res68: scala.collection.immutable.Map[Int,String] = Map(9 -&amp;gt; Elwood)

scala&amp;gt; p
res69: scala.collection.immutable.Map[Int,String] = Map(1 -&amp;gt; David, 9 -&amp;gt; Elwood)

scala&amp;gt; p ++ List(2 -&amp;gt; &quot;Alice&quot;, 5-&amp;gt; &quot;Bob&quot;)
res70: scala.collection.immutable.Map[Int,String] = Map(1 -&amp;gt; David, 9 -&amp;gt; Elwood, 2 -&amp;gt; Alice, 5 -&amp;gt; Bob)

scala&amp;gt; p -- List(1, 9, 2)
res71: scala.collection.immutable.Map[Int,String] = Map()

scala&amp;gt; p
res72: scala.collection.immutable.Map[Int,String] = Map(1 -&amp;gt; David, 9 -&amp;gt; Elwood)

scala&amp;gt; p ++ List(2 -&amp;gt; &quot;Alice&quot;, 5-&amp;gt; &quot;Bob&quot;) -- List(9,1)
res73: scala.collection.immutable.Map[Int,String] = Map(2 -&amp;gt; Alice, 5 -&amp;gt; Bob)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;21 Savage - a lot ft. J. Cole&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&quot;728&quot; height=&quot;541&quot; src=&quot;https://www.youtube.com/embed/DmWWqogr_r8&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Daniel Zhang</name></author><category term="notes" /><summary type="html"></summary></entry><entry><title type="html">AlgoCast:0x001 回文字符串判断(Leetcode 125)</title><link href="http://localhost:4001/algorithm/AlgoCasts-0x001/" rel="alternate" type="text/html" title="AlgoCast:0x001 回文字符串判断(Leetcode 125)" /><published>2019-01-01T00:00:00+11:00</published><updated>2019-01-01T00:00:00+11:00</updated><id>http://localhost:4001/algorithm/AlgoCasts-0x001</id><content type="html" xml:base="http://localhost:4001/algorithm/AlgoCasts-0x001/">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If you like it, you can subscribe the &lt;a href=&quot;https://algocasts.io&quot;&gt;AlgoCasts&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;问题&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个题目说的是，给你一个字符串，你要判断它是否是回文字符串。字符串里只考虑字母和数字，其它的字符可以无视。另外，对于字母，可以忽略大小写。&lt;/p&gt;

&lt;p&gt;比如说，给你的字符串是：&lt;/p&gt;

&lt;p&gt;” race a E-car “&lt;/p&gt;

&lt;p&gt;只考虑字母数字并且忽略大小写，它是一个回文字符串，因此返回 true。再比如说，给你的字符串是&lt;/p&gt;

&lt;p&gt;” race a car “&lt;/p&gt;

&lt;p&gt;对比到最后，中间的 e 和 a 不相等，因此不是一个回文字符串，返回 false。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;这道题的解题思想是,两端点对称游标向中间移动,查看对称点的字符是否相等
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 判断字符是不是英文或者是不是数字
private static boolean isAlphanumeric(char c){
 return ( c &amp;gt;= 'a' &amp;amp;&amp;amp; c &amp;lt;= 'z') || (c &amp;gt;= 'A' &amp;amp;&amp;amp; c &amp;lt;= 'Z')
          || (c &amp;gt;= '0' &amp;amp;&amp;amp; c &amp;lt;= '9');   
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 查看两个字符是否相等，忽略大小写。 这里加32是因为大写字母与小写字母相差32
 private static boolean isEqualIgnoreCase(char a, char b){
        if ( a &amp;gt;= 'A' &amp;amp;&amp;amp; a &amp;lt;= 'Z') a +=32; //把大写字母变成小写字母
        if ( b &amp;gt;= 'A' &amp;amp;&amp;amp; b &amp;lt;= 'Z') b +=32;
        return a == b;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 请注意，下面的时间复杂度是 O(n), 即使有while循环
// Time: O(n), Space: O(1)
  public boolean isPalindrome(String s) {
    if (s == null || s.length() == 0) return true;

    int i = 0, j = s.length() - 1;
    //前后两个节点向中间对撞
    for (; i &amp;lt; j; ++i, --j) {
      while (i &amp;lt; j &amp;amp;&amp;amp; !isAlphanumeric(s.charAt(i))) ++i; //如果字符不是数字或英文则坐标像右移
      while (i &amp;lt; j &amp;amp;&amp;amp; !isAlphanumeric(s.charAt(j))) --j; //如果字符不是数字或英文则坐标像左移
      if (i &amp;lt; j &amp;amp;&amp;amp; !isEqualIgnoreCase(s.charAt(i), s.charAt(j))) return false; //查看对称位点的字符是否一样
    }
    return true;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Daniel Zhang</name></author><category term="algorithm" /><summary type="html">If you like it, you can subscribe the AlgoCasts</summary></entry><entry><title type="html">Website Self-Learning</title><link href="http://localhost:4001/security/Security-Website/" rel="alternate" type="text/html" title="Website Self-Learning" /><published>2016-12-30T00:00:00+11:00</published><updated>2016-12-30T00:00:00+11:00</updated><id>http://localhost:4001/security/Security%20Website</id><content type="html" xml:base="http://localhost:4001/security/Security-Website/">&lt;h3 id=&quot;1bwapp&quot;&gt;1.bWAPP&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Home bWAPP, or a buggy web application, is a free and open source deliberately insecure web application.It helps security enthusiasts, developers and students to discover and to prevent web vulnerabilities.bWAPP prepares one to conduct successful penetration testing and ethical hacking projects.
    &lt;ul&gt;
      &lt;li&gt;Link: &lt;a href=&quot;http://www.itsecgames.com/&quot;&gt;http://www.itsecgames.com/&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2damn-bulnerable-ios-app-dvia&quot;&gt;2.Damn Bulnerable IOS App (DVIA)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Link: &lt;a href=&quot;http://damnvulnerableiosapp.com/&quot;&gt;http://damnvulnerableiosapp.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3damn-vulnerable-web-application-dvwa&quot;&gt;3.Damn Vulnerable Web Application (DVWA)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Link: &lt;a href=&quot;http://www.dvwa.co.uk/&quot;&gt;http://www.dvwa.co.uk/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4game-of-hacks&quot;&gt;4.Game of Hacks&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Link: &lt;a href=&quot;http://www.gameofhacks.com/&quot;&gt;http://www.gameofhacks.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5google-gruyere&quot;&gt;5.Google Gruyere&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Link: &lt;a href=&quot;http://google-gruyere.appspot.com/&quot;&gt;http://google-gruyere.appspot.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;6hackthis&quot;&gt;6.HackThis!!&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Link: &lt;a href=&quot;https://www.hackthis.co.uk/&quot;&gt;https://www.hackthis.co.uk/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;7-hack-this-sites&quot;&gt;7. Hack This Sites&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Link: &lt;a href=&quot;https://www.hackthissite.org/&quot;&gt;https://www.hackthissite.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;8hellbound-hackers&quot;&gt;8.Hellbound Hackers&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Link: &lt;a href=&quot;http://www.hellboundhackers.org/&quot;&gt;https://www.helloundhackers.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;9mcafee-hacme-sites&quot;&gt;9.McAfee HacMe Sites&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Link: &lt;a href=&quot;http://www.mcafee.com/us/downloads/free-tools/index.aspx&quot;&gt;http://www.mcafee.com/us/downloads/free-tools/index.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;10mutillidae&quot;&gt;10.Mutillidae&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Link: &lt;a href=&quot;https://sourceforge.net/projects/mutillidae&quot;&gt;https://sourceforge.net/projects/mutillidae/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;11overthewire&quot;&gt;11.OverTheWire&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Link: &lt;a href=&quot;https://overthewire.org/wargames/&quot;&gt;http://overthewire.org/wargames&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;12peruggia&quot;&gt;12.Peruggia&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Link: &lt;a href=&quot;https://sourceforge.net/projects/peruggia/&quot;&gt;https://sourceforge.net/projects/peruggia/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;13root-me&quot;&gt;13.Root Me&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Link: &lt;a href=&quot;https://www.root-me.org/&quot;&gt;https://www.root-me.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;14-try2hack&quot;&gt;14. Try2Hack&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Link: &lt;a href=&quot;http://www.try2hack.nl/&quot;&gt;http://www.try2hack.nl/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;15-vicnum&quot;&gt;15. Vicnum&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Link: &lt;a href=&quot;http://vicnum.ciphertechs.com/&quot;&gt;http://vicnum.ciphertechs.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;16-webgoat&quot;&gt;16. WebGoat&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Link: &lt;a href=&quot;http://webappsecmovies.sourceforge.net/webgoat/&quot;&gt;http://webappsecmovies.sourceforge.net/webgoat/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;17-i-chun-qiu-china&quot;&gt;17. I Chun Qiu (China)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Link: &lt;a href=&quot;http://www.ichunqiu.com/main/&quot;&gt;http://www.ichunqiu.com/main&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;18-xctf_oj-china&quot;&gt;18. XCTF_OJ (China)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Link: &lt;a href=&quot;http://oj.xctf.org.cn/&quot;&gt;http://oj.xctf.org.cn/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;19-security-attacking-and-defense-platform-china&quot;&gt;19. Security Attacking and Defense Platform (China)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Link: &lt;a href=&quot;http://hackinglab.cn/index.php&quot;&gt;http://hackinglab.cn/index.php&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;20-vulnerable-by-design--vulnhub-thanks-for-苍冥&quot;&gt;20. Vulnerable By Design ~ VulnHub (Thanks for 苍冥)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Link: &lt;a href=&quot;https://www.vulnhub.com/&quot;&gt;https://www.vulnhub.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;21-live-overfloe&quot;&gt;21. Live Overfloe&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Link: &lt;a href=&quot;http://liveoverflow.com/&quot;&gt;http://liveoverflow.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;watch-dog-2---marcus&quot;&gt;Watch Dog 2 - Marcus&lt;/h1&gt;

&lt;div style=&quot;max-width:640px; margin:0 auto 10px;&quot;&gt;
&lt;div style=&quot;position: relative;
width:100%;
padding-bottom:56.25%;
height:0;&quot;&gt;

&lt;iframe width=&quot;854&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/hh9x4NqW0Dw&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;
&lt;/div&gt;</content><author><name>Daniel Zhang</name></author><category term="security" /><summary type="html">1.bWAPP</summary></entry><entry><title type="html">8.1 Learn Data Structure with Daniel — BFS Theory</title><link href="http://localhost:4001/algorithm/DanielAlgorithm8.1/" rel="alternate" type="text/html" title="8.1 Learn Data Structure with Daniel --- BFS Theory" /><published>2016-12-03T00:00:00+11:00</published><updated>2016-12-03T00:00:00+11:00</updated><id>http://localhost:4001/algorithm/DanielAlgorithm8.1</id><content type="html" xml:base="http://localhost:4001/algorithm/DanielAlgorithm8.1/">&lt;script type=&quot;text/javascript&quot; async=&quot;&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;
&lt;/script&gt;

&lt;h1 id=&quot;bfs-theory&quot;&gt;BFS Theory&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;We visit every vertex exactly once&lt;/li&gt;
  &lt;li&gt;We visit each neighbour vertex then the neighbours of these new vertices&lt;/li&gt;
  &lt;li&gt;Running time of the algorithm: &lt;script type=&quot;math/tex&quot;&gt;O(V+E)&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.hackerearth.com/wp-content/uploads/2015/05/dfsbfs_animation_final.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It has to store a lot of pointers so it is not as efficient as depth first search&lt;/li&gt;
  &lt;li&gt;It construct shortest path tree: Dijkstra shortest path algorithm does a BFS if all the edge weight are equal to 1&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Dijkstra
&lt;img src=&quot;http://hastuts.com/wp-content/uploads/2014/07/Dijkstras-algorithm.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;In AI / machine learning it can prove to be very important: robots can discover the surrounding more easily with BFS than DFS&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It is also very important in maximum flow: the &lt;a href=&quot;https://en.wikipedia.org/wiki/Edmonds%E2%80%93Karp_algorithm&quot;&gt;Edmonds-Karp&lt;/a&gt; maximum flow algorithm uses BFS for finding augmenting paths&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cheyen’s algorithm in garbage collecion: simliar to mark and sweep gc procedure, it helps to maintain the active references -&amp;gt; it uses BFS to detect all the references on the heap memmory.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://www.tensorflow.org/&quot;&gt;TensorFlow&lt;/a&gt;&lt;/p&gt;

&lt;div style=&quot;max-width:640px; margin:0 auto 10px;&quot;&gt;
&lt;div style=&quot;position: relative;
width:100%;
padding-bottom:56.25%;
height:0;&quot;&gt;



&lt;iframe width=&quot;854&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/mWl45NkFBOc&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;
&lt;/div&gt;</content><author><name>Daniel Zhang</name></author><category term="algorithm" /><summary type="html"></summary></entry><entry><title type="html">7.1 Learn Data Structure with Daniel — Graph Theory</title><link href="http://localhost:4001/algorithm/DanielAlgorithm7.1/" rel="alternate" type="text/html" title="7.1 Learn Data Structure with Daniel --- Graph Theory" /><published>2016-12-02T00:00:00+11:00</published><updated>2016-12-02T00:00:00+11:00</updated><id>http://localhost:4001/algorithm/DanielAlgorithm7.1</id><content type="html" xml:base="http://localhost:4001/algorithm/DanielAlgorithm7.1/">&lt;script type=&quot;text/javascript&quot; async=&quot;&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;
&lt;/script&gt;

&lt;h1 id=&quot;graph-theory&quot;&gt;Graph Theory&lt;/h1&gt;

&lt;h3 id=&quot;undirected-graph&quot;&gt;Undirected Graph&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://courses.cs.washington.edu/courses/cse421/07su/hw/hw2dfsb.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It means that you can go to B from A or go to A from B&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;directed-graph&quot;&gt;Directed Graph&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://www.mrgeek.me/wp-content/uploads/2014/04/directed-graph.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It means that you can just go to B form A.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://embed.wistia.com/deliveries/712da88a887ce673e90a1a088faf5a6397b8fc6f.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;hamiltonian-path-point&quot;&gt;Hamiltonian path (Point)&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;It is a path in an undirected or directed graph that visits each vertex exactly once&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://support.esri.com/~/media/Support/GISDictionary/Hamiltonian-path.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hamiltonian cycle is a Hamiltonian path that is a cycle&lt;/li&gt;
  &lt;li&gt;Determining whether such paths and cycles exist in graphs is NP-Complete!!!&lt;/li&gt;
  &lt;li&gt;Simulations&lt;/li&gt;
  &lt;li&gt;Travelling salesman problem relies on Hamiltonian cycles&lt;/li&gt;
  &lt;li&gt;TSP problem: given a list of cities and the distances between each pair of cities, what is the shortest possible route that visits each city exactly once and returns to the origin city?&lt;/li&gt;
  &lt;li&gt;If there is a Hamiltoninan path for a graph: it is the solution for the travelling salesman problem&lt;/li&gt;
  &lt;li&gt;NP-complete problem&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;eulerian-path-line&quot;&gt;Eulerian Path (Line)&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;It is a trail in a graph which visits every edge exactly once&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://4.bp.blogspot.com/-LOrP3erurXs/UZBWITqkF7I/AAAAAAAAAN4/hq6Y-NM1t58/s1600/Screen+shot+2013-05-12+at+8.02.42+PM.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Eulerian cycle is an Eulerian trail which starts and ends on the same vertex&lt;/li&gt;
  &lt;li&gt;An undirected graph has an Eulerian cycle if and only if every vertex has even degree&lt;/li&gt;
  &lt;li&gt;We can construct graphs that has Eulerian cycles with Heirholzer algorithm…important for the Chinese Postman Problem.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQLf7jrFC4oMD8gEkh37WhNJI5NY4i6cvuv9UzDc25hCh76yrz9&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Chinese postman problem: a postman needs to go through every street at least once + closed circuit + wants to find a shortest path.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://p1.bpimg.com/567571/123ffd063684a82f.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If there is an Eulerian cycle that is the solution for the CPP!!!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2016-code-jam-world-finals-in-new-york-city-highlight-reel&quot;&gt;2016 &lt;a href=&quot;https://en.wikipedia.org/wiki/Google_Code_Jam&quot;&gt;Code Jam&lt;/a&gt; World Finals in New York City Highlight Reel&lt;/h3&gt;

&lt;div style=&quot;max-width:640px; margin:0 auto 10px;&quot;&gt;
&lt;div style=&quot;position: relative;
width:100%;
padding-bottom:56.25%;
height:0;&quot;&gt;

&lt;iframe width=&quot;854&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/g9ebwBWEuCc&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;
&lt;/div&gt;</content><author><name>Daniel Zhang</name></author><category term="algorithm" /><summary type="html"></summary></entry><entry><title type="html">6.1 Learn Data Structure with Daniel — Ternary Search Trees Theory</title><link href="http://localhost:4001/algorithm/DanielAlgorithm6.1/" rel="alternate" type="text/html" title="6.1 Learn Data Structure with Daniel --- Ternary Search Trees Theory" /><published>2016-11-29T00:00:00+11:00</published><updated>2016-11-29T00:00:00+11:00</updated><id>http://localhost:4001/algorithm/DanielAlgorithm6.1</id><content type="html" xml:base="http://localhost:4001/algorithm/DanielAlgorithm6.1/">&lt;script type=&quot;text/javascript&quot; async=&quot;&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;
&lt;/script&gt;

&lt;h1 id=&quot;ternary-search-trees-theory&quot;&gt;Ternary Search Trees Theory&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;With the help of tries we can search and sort strings very very efficiently&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://p1.bpimg.com/567571/ab8435fc783967f9.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The problem is that tries consume a lot of memory, so we should use ternary search trees instead which stores less references and null objects&lt;/li&gt;
  &lt;li&gt;TST stores characters or strings in noes / not keys&lt;/li&gt;
  &lt;li&gt;Each node has 3 children: less, equal or greater&lt;/li&gt;
  &lt;li&gt;Can we balance TST-s with rotations? Yes but not worth the trouble&lt;/li&gt;
  &lt;li&gt;It can be used insted of hashmap: it is as efficient as hashing&lt;/li&gt;
  &lt;li&gt;Hashing need to examine the entire string key … TST do not&lt;/li&gt;
  &lt;li&gt;TST support sorting operation!!!&lt;/li&gt;
  &lt;li&gt;TST is better than hashing :
    &lt;ul&gt;
      &lt;li&gt;especially for search misses&lt;/li&gt;
      &lt;li&gt;flexible than BST (usually there is no perfect hash function)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Conclusion: TST is faster than hashmap and more flexible than binary search trees&lt;/li&gt;
  &lt;li&gt;Applications:
    &lt;ul&gt;
      &lt;li&gt;Very important in package routing. The router direct the packages in the direction of the lognest prefix. It can be found very quickly with the help of TST-s.&lt;/li&gt;
      &lt;li&gt;Prefix matching ~ google search：We can use DFS instead usually&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;important-notes&quot;&gt;Important notes&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;We should combine R-way treis with TST&lt;/li&gt;
  &lt;li&gt;At the root: it is an R-way trie with many many children&lt;/li&gt;
  &lt;li&gt;At lower levels it becomes a TST with 3 children only&lt;/li&gt;
  &lt;li&gt;This combination is quite efficient !!!&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;tst-vs-hashing&quot;&gt;TST vs Hashing&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Hashing
    &lt;ol&gt;
      &lt;li&gt;Need to examine the entire key ( becuase that is the way the hash function works)&lt;/li&gt;
      &lt;li&gt;Search hits and misses cost the same&lt;/li&gt;
      &lt;li&gt;The running time and performance relies heavily on the hashfunction&lt;/li&gt;
      &lt;li&gt;Does not support as much operations than TST ( sorting )&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;TST
    &lt;ol&gt;
      &lt;li&gt;Works only for strings&lt;/li&gt;
      &lt;li&gt;Only examines just enough key characters&lt;/li&gt;
      &lt;li&gt;Search miss may only involve a fer characters&lt;/li&gt;
      &lt;li&gt;Support more operations (sorting)&lt;/li&gt;
      &lt;li&gt;Faster than hashing (for misses especially) and flexible than BST&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;applications&quot;&gt;Applications&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;It can be used to implement the auto-complete feature very very efficiently&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://i1.piimg.com/567571/f0b97a40272dea7a.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Can be used for spell-checkers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://i1.piimg.com/567571/626be11492adc9a4.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Near-neighbor searching (Of which a spell-check is a special case)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For databases especially when indexing by serveral non-key fields is desirable&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://i1.piimg.com/567571/ca3b0d29a0849651.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Paper: &lt;a href=&quot;http://www.cs.princeton.edu/~rs/strings/&quot;&gt;Fast Algorithms for Sorting and Searching Strings&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dr.Dobb’s &lt;a href=&quot;http://www.drdobbs.com/database/ternary-search-trees/184410528&quot;&gt;Ternary Search Trees&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;pwn2own-2016-day-2-and-event-wrap-up&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Pwn2Own&quot;&gt;Pwn2Own&lt;/a&gt; 2016: Day 2 and Event Wrap-Up&lt;/h1&gt;

&lt;div style=&quot;max-width:640px; margin:0 auto 10px;&quot;&gt;
&lt;div style=&quot;position: relative;
width:100%;
padding-bottom:56.25%;
height:0;&quot;&gt;

&lt;iframe width=&quot;854&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/Sh8pveFv2DI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;
&lt;/div&gt;</content><author><name>Daniel Zhang</name></author><category term="algorithm" /><summary type="html"></summary></entry></feed>