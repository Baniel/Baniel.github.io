<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4001/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4001/" rel="alternate" type="text/html" /><updated>2019-02-27T17:50:25+11:00</updated><id>http://localhost:4001/feed.xml</id><title type="html">Daniel Tech Blog</title><subtitle>Daniel Tech Blog</subtitle><author><name>Daniel Zhang</name></author><entry><title type="html">Scala Big Data Tutorial 0x03 Object</title><link href="http://localhost:4001/notes/Scala_Big_Data_0x03/" rel="alternate" type="text/html" title="Scala Big Data Tutorial 0x03 Object" /><published>2019-02-22T00:00:00+11:00</published><updated>2019-02-22T00:00:00+11:00</updated><id>http://localhost:4001/notes/Scala_Big_Data_0x03</id><content type="html" xml:base="http://localhost:4001/notes/Scala_Big_Data_0x03/">&lt;p&gt;&lt;img src=&quot;../../assets/images/scala_bigdata.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;scala-面向对象&quot;&gt;Scala 面向对象&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;构造器&lt;/li&gt;
  &lt;li&gt;继承与重写&lt;/li&gt;
  &lt;li&gt;抽象类&lt;/li&gt;
  &lt;li&gt;伴生类和伴生对象&lt;/li&gt;
  &lt;li&gt;apply&lt;/li&gt;
  &lt;li&gt;case class&lt;/li&gt;
  &lt;li&gt;trait&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;javascala-oop&quot;&gt;Java/Scala OOP&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;封装：属性、方法封装到类中
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Person:
  private int id, String name, Date birthday...

  getter/setter
  eat、sleeping...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;继承：匪类和子类之间的关系&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;User extends Person
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;多态：⭐️⭐️⭐️⭐️⭐️  父类引用指向子类对象 ··· 精髓所在 ··· 开发框架的基石&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Person person = new Person();
User user = new User();
Person person = new User();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Daniel Zhang</name></author><category term="notes" /><summary type="html"></summary></entry><entry><title type="html">Scala Big Data Tutorial 0x02 Function</title><link href="http://localhost:4001/notes/Scala_Big_Data_0x02/" rel="alternate" type="text/html" title="Scala Big Data Tutorial 0x02 Function" /><published>2019-02-21T00:00:00+11:00</published><updated>2019-02-21T00:00:00+11:00</updated><id>http://localhost:4001/notes/Scala_Big_Data_0x02</id><content type="html" xml:base="http://localhost:4001/notes/Scala_Big_Data_0x02/">&lt;p&gt;&lt;img src=&quot;../../assets/images/scala_bigdata.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def 方法名(参数名:参数类型): 返回值类型 = {
  // 括号内的叫做方法体

  // 方法体内的最后一行为返回值，不需要使用 return
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def add(x: Int, y:Int): Int = {
  x + y //最后一行就是返回值，不需要return
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def three() = 1 + 2

println(three())
println(three) // 没有入参的函数，调用时括号是可以省略的
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;默认参数在函数定义时允许指定参数的默认值&quot;&gt;默认参数：在函数定义时，允许指定参数的默认值&lt;/h3&gt;

&lt;h3 id=&quot;命名参数&quot;&gt;命名参数&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt;   def speed(distance:Float, time:Float):Float = {
     |     distance/time
     |   }
speed: (distance: Float, time: Float)Float

scala&amp;gt; println(speed(100,10))
10.0

scala&amp;gt; println(speed(distance = 100, time = 10))
10.0

scala&amp;gt; println(speed(time = 10, distance = 100))
10.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;可变参数&quot;&gt;可变参数&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  def sum(a:Int, b:Int) = {
    a + b
  }

  def sum(a:Int, b:Int, c:Int) = {
    a + b + c
  }

  def sum2(numbers:Int*) = {

    var result = 0
    for(number &amp;lt;- numbers ){
      result += number
    }

    result
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;logic---1-800-273-8255-live-at-the-mtv-vmas--2017-ft-alessia-cara-khalid&quot;&gt;Logic - 1-800-273-8255 (Live At The MTV VMAs / 2017) ft. Alessia Cara, Khalid&lt;/h3&gt;

&lt;iframe width=&quot;760&quot; height=&quot;428&quot; src=&quot;https://www.youtube.com/embed/_Ju6Q8Azcmg&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Daniel Zhang</name></author><category term="notes" /><summary type="html"></summary></entry><entry><title type="html">Scala Big Data Tutorial 0x01</title><link href="http://localhost:4001/notes/Scala_Big_Data_0x01/" rel="alternate" type="text/html" title="Scala Big Data Tutorial 0x01" /><published>2019-02-20T00:00:00+11:00</published><updated>2019-02-20T00:00:00+11:00</updated><id>http://localhost:4001/notes/Scala_Big_Data_0x01</id><content type="html" xml:base="http://localhost:4001/notes/Scala_Big_Data_0x01/">&lt;p&gt;&lt;img src=&quot;../../assets/images/scala_bigdata.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;java-vs-scala&quot;&gt;Java Vs Scala&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Java: (It should add “;”)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; public class HelloWorld {
   public static void main(String[] args){
     System.out.println(&quot;Hello World...&quot;);
   }
 }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Scala: (No Static)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;object HelloWorld {
  def main(args: Array[String]){
    println(&quot;Hello World...&quot;)
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;val-vs-var-值改变的时候就用var&quot;&gt;val vs var (值改变的时候就用var)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;val: value
    &lt;ul&gt;
      &lt;li&gt;final (immutable)&lt;/li&gt;
      &lt;li&gt;val (value name):(Type) = xxx&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;var: variable
    &lt;ul&gt;
      &lt;li&gt;mutable&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;data-types&quot;&gt;Data Types&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; val d = 1.1
d: Double = 1.1

scala&amp;gt; val e:Float = 1.1
&amp;lt;console&amp;gt;:11: error: type mismatch;
 found   : Double(1.1)
 required: Float
       val e:Float = 1.1
                     ^

scala&amp;gt; val e:Float = 1.1f
e: Float = 1.1

scala&amp;gt; val d = 1.2f
d: Float = 1.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; val f = 10
f: Int = 10

scala&amp;gt; val g = 10.asInstanceOf[Double]
g: Double = 10.0

scala&amp;gt; g
res75: Double = 10.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; val h = 10.isInstanceOf[Int]
h: Boolean = true


scala&amp;gt; val h = 10.isInstanceOf[Double]
h: Boolean = false

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;lazy-network-computing&quot;&gt;Lazy (Network Computing)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; val i = 1
i: Int = 1

scala&amp;gt; lazy val a =1
a: Int = &amp;lt;lazy&amp;gt;

When you are using the value,
it just computes the value.

scala&amp;gt; a
res76: Int = 1

When you are not using the lazy value,
even it's such a wrong operation,
but it will not report an error.


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Rich The Kid - Plug Walk&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/Xq-DkTnBZrk&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Daniel Zhang</name></author><category term="notes" /><summary type="html"></summary></entry><entry><title type="html">Scala Tutorial Imooc</title><link href="http://localhost:4001/notes/Scala_Imooc/" rel="alternate" type="text/html" title="Scala Tutorial Imooc" /><published>2019-02-01T00:00:00+11:00</published><updated>2019-02-01T00:00:00+11:00</updated><id>http://localhost:4001/notes/Scala_Imooc</id><content type="html" xml:base="http://localhost:4001/notes/Scala_Imooc/">&lt;p&gt;&lt;img src=&quot;../../assets/images/scala_tutorial.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1list&quot;&gt;1.List&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; val a = List(1,2,3,4)
a: List[Int] = List(1, 2, 3, 4)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; val b = 0 :: a
b: List[Int] = List(0, 1, 2, 3, 4)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; val c = &quot;x&quot; :: &quot;y&quot; :: &quot;z&quot; ::  Nil
c: List[String] = List(x, y, z)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; &quot;z&quot; :: Nil
res0: List[String] = List(z)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; &quot;x&quot; :: res0
res2: List[String] = List(x, z)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; val d = a ::: c
d: List[Any] = List(1, 2, 3, 4, x, y, z)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; a.head
res3: Int = 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; d.head
res4: Any = 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; c.head
res5: String = x
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; a.tail
res6: List[Int] = List(2, 3, 4)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; c.tail
res7: List[String] = List(y, z)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; a.isEmpty
res8: Boolean = false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; c.isEmpty
res9: Boolean = false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; Nil.isEmpty
res10: Boolean = true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;用递归和取头元素来写一个 List 遍历函数&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; def walkthru(l: List[Int]): String = {
     | if(l.isEmpty) &quot;&quot;
     | else l.head.toString + &quot; &quot; + walkthru(l.tail)
     | }
walkthru: (l: List[Int])String

scala&amp;gt; walkthru(a)
res11: String = &quot;1 2 3 4 &quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;2filter-函数&quot;&gt;2.Filter 函数&lt;/h1&gt;
&lt;hr /&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; a.filter(x =&amp;gt; x % 2 ==1)
res12: List[Int] = List(1, 3)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;把字符串变成char的List
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; &quot;99 Red Ballons&quot;.toList
res13: List[Char] = List(9, 9,  , R, e, d,  , B, a, l, l, o, n, s)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; &quot;99 Red Ballons&quot;.toList.filter(x =&amp;gt; Character.isDigit(x))
res15: List[Char] = List(9, 9)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; &quot;99 Red Ballons&quot;.toList.takeWhile(x =&amp;gt; x != 'B')
res16: List[Char] = List(9, 9,  , R, e, d,  )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;3map-函数&quot;&gt;3.Map 函数&lt;/h1&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; c.map(x =&amp;gt; x.toUpperCase)
res18: List[String] = List(X, Y, Z)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; c.map( _.toUpperCase)
res22: List[String] = List(X, Y, Z)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; a.filter ( _ % 2 == 1)
res23: List[Int] = List(1, 3)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; a.filter ( _ % 2 == 1).map( _ + 10)
res24: List[Int] = List(11, 13)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; val q = List( a, List(4, 5, 6))
q: List[List[Int]] = List(List(1, 2, 3, 4), List(4, 5, 6))

scala&amp;gt; q.map(x =&amp;gt; x.filter( _ % 2 == 0))
res25: List[List[Int]] = List(List(2, 4), List(4, 6))

scala&amp;gt; q.map( _.filter( _ % 2 == 0))
res26: List[List[Int]] = List(List(2, 4), List(4, 6))

scala&amp;gt; q.flatMap( _.filter( _ % 2 == 0))
res27: List[Int] = List(2, 4, 4, 6)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;4reduceleft-与-flodleft-规约&quot;&gt;4.reduceLeft 与 flodLeft (规约)&lt;/h1&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;ReduceLeft&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; a
res28: List[Int] = List(1, 2, 3, 4)

scala&amp;gt; a.reduceLeft((x,y) =&amp;gt; x + y)
res29: Int = 10

scala&amp;gt; a.reduceLeft(_ + _)
res30: Int = 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;FlodLeft&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; a
res33: List[Int] = List(1, 2, 3, 4)

scala&amp;gt; a.foldLeft(0)(_ + _)
res35: Int = 10

scala&amp;gt; a.foldLeft(1)(_ * _)
res36: Int = 24

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;5range-与-stream&quot;&gt;5.Range 与 Stream&lt;/h1&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Range&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; 1 to 10
res37: scala.collection.immutable.Range.Inclusive = Range 1 to 10

scala&amp;gt; 1 to 10 by 2
res39: scala.collection.immutable.Range = inexact Range 1 to 10 by 2

scala&amp;gt; (1 to 10).toList
res40: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

scala&amp;gt; 1 until 10
res41: scala.collection.immutable.Range = Range 1 until 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Stream&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; 1 #:: 2 #:: 3 #:: Stream.empty
res44: scala.collection.immutable.Stream[Int] = Stream(1, ?)

scala&amp;gt; val stream = (1 to 10000000).toStream
stream: scala.collection.immutable.Stream[Int] = Stream(1, ?)

scala&amp;gt; stream.head
res45: Int = 1

scala&amp;gt; stream.tail
res46: scala.collection.immutable.Stream[Int] = Stream(2, ?)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;6tuple与map&quot;&gt;6.tuple与map&lt;/h1&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;tuple&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; (1,2)
res48: (Int, Int) = (1,2)

scala&amp;gt; 1 -&amp;gt; 2
res49: (Int, Int) = (1,2)

scala&amp;gt; (1, &quot;Alice&quot;, &quot;Math&quot;, 95.5)
res50: (Int, String, String, Double) = (1,Alice,Math,95.5)

scala&amp;gt; val t =  (1, &quot;Alice&quot;, &quot;Math&quot;, 95.5)
t: (Int, String, String, Double) = (1,Alice,Math,95.5)

scala&amp;gt; t._1
res51: Int = 1

scala&amp;gt; t._2
res52: String = Alice

scala&amp;gt; t._3
res53: String = Math

scala&amp;gt; t._4
res54: Double = 95.5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; def sumSq(in : List[Int]): (Int, Int, Int) = {
     | in.foldLeft((0,0,0))((t,v) =&amp;gt; (t._1 + 1, t._2 + v, t._3 + v*v))
     | }
sumSq: (in: List[Int])(Int, Int, Int)

scala&amp;gt; sumSq(a)
res56: (Int, Int, Int) = (4,10,30)

scala&amp;gt; a
res57: List[Int] = List(1, 2, 3, 4)

scala&amp;gt; sumSq(a)
res58: (Int, Int, Int) = (4,10,30)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Map&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; val p = Map( 1 -&amp;gt; &quot;David&quot;, 9 -&amp;gt; &quot;Elwood&quot;)
p: scala.collection.immutable.Map[Int,String] = Map(1 -&amp;gt; David, 9 -&amp;gt; Elwood)

scala&amp;gt; p(1)
res59: String = David

scala&amp;gt; p(9)
res60: String = Elwood

scala&amp;gt; p(2)
java.util.NoSuchElementException: key not found: 2
  at scala.collection.immutable.Map$Map2.apply(Map.scala:138)
  ... 28 elided

scala&amp;gt; p.contains(1)
res62: Boolean = true

scala&amp;gt; p.contains(2)
res63: Boolean = false

scala&amp;gt; p.keys
res64: Iterable[Int] = Set(1, 9)

scala&amp;gt; p.values
res65: Iterable[String] = MapLike.DefaultValuesIterable(David, Elwood)

scala&amp;gt; p + (8 -&amp;gt; &quot;Archer&quot;)
res66: scala.collection.immutable.Map[Int,String] = Map(1 -&amp;gt; David, 9 -&amp;gt; Elwood, 8 -&amp;gt; Archer)

scala&amp;gt; p
res67: scala.collection.immutable.Map[Int,String] = Map(1 -&amp;gt; David, 9 -&amp;gt; Elwood)

scala&amp;gt; p - 1
res68: scala.collection.immutable.Map[Int,String] = Map(9 -&amp;gt; Elwood)

scala&amp;gt; p
res69: scala.collection.immutable.Map[Int,String] = Map(1 -&amp;gt; David, 9 -&amp;gt; Elwood)

scala&amp;gt; p ++ List(2 -&amp;gt; &quot;Alice&quot;, 5-&amp;gt; &quot;Bob&quot;)
res70: scala.collection.immutable.Map[Int,String] = Map(1 -&amp;gt; David, 9 -&amp;gt; Elwood, 2 -&amp;gt; Alice, 5 -&amp;gt; Bob)

scala&amp;gt; p -- List(1, 9, 2)
res71: scala.collection.immutable.Map[Int,String] = Map()

scala&amp;gt; p
res72: scala.collection.immutable.Map[Int,String] = Map(1 -&amp;gt; David, 9 -&amp;gt; Elwood)

scala&amp;gt; p ++ List(2 -&amp;gt; &quot;Alice&quot;, 5-&amp;gt; &quot;Bob&quot;) -- List(9,1)
res73: scala.collection.immutable.Map[Int,String] = Map(2 -&amp;gt; Alice, 5 -&amp;gt; Bob)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Jay-Z &amp;amp; Kanye West - Ni**as In Paris (Explicit)&lt;/p&gt;

&lt;iframe width=&quot;760&quot; height=&quot;428&quot; src=&quot;https://www.youtube.com/embed/gG_dA32oH44&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Daniel Zhang</name></author><category term="notes" /><summary type="html"></summary></entry><entry><title type="html">Java Interview Spring</title><link href="http://localhost:4001/notes/Java_Interview_Spring/" rel="alternate" type="text/html" title="Java Interview Spring" /><published>2019-01-26T00:00:00+11:00</published><updated>2019-01-26T00:00:00+11:00</updated><id>http://localhost:4001/notes/Java_Interview_Spring</id><content type="html" xml:base="http://localhost:4001/notes/Java_Interview_Spring/">&lt;p&gt;&lt;img src=&quot;../../assets/images/JavaInterview.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;do-you-understand-the-spring-ioc-&quot;&gt;Do you understand the Spring IOC ?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The core part of the Spring Core&lt;/li&gt;
  &lt;li&gt;Eg: How to design a luggage.
    &lt;ul&gt;
      &lt;li&gt;tire &amp;lt;- depend - bottome &amp;lt;- depend - framework &amp;lt;- depend - luggage&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;high-level-part-depend-low-level-part&quot;&gt;High level Part depend Low level part&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Luggage {
  private Framework framework;
  Luggage(){
    this.framework = new Framework();
  }
  public void move(){
    //... 相关逻辑
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Framework {
  private Bottom bottom;
  Framework(){
    this.bottom = new Bottom();
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Bottom {
  private Tire tire;
  Bottom() {
    this.tire = new Tire();
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Tire{
  private int size;
  Tire(){
    this.size = 20;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ioc-dependency-injection&quot;&gt;IOC (dependency injection)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;依赖注入：把底层类作为参数传递给上层类，实现上层类对下层类的“控制”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Eg: How to design a luggage.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;luggage &amp;lt;- Injection - framework &amp;lt;- Injection - bottome &amp;lt;- Injection -&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-logic-of-the-getbean-code&quot;&gt;The logic of the “getBean()” code&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;转换beanName&lt;/li&gt;
  &lt;li&gt;从缓存中加载实例&lt;/li&gt;
  &lt;li&gt;实例化Bean&lt;/li&gt;
  &lt;li&gt;检测parentBeanFactory&lt;/li&gt;
  &lt;li&gt;初始化依赖的Bean&lt;/li&gt;
  &lt;li&gt;创建Bean&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;spring-bean-的作用域&quot;&gt;Spring Bean 的作用域&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;singleton: Spring的默认作用域，容器里拥有唯一的Bean实例&lt;/li&gt;
  &lt;li&gt;prototype: 针对每个getBean请求，容器都会创建一个Bean实例&lt;/li&gt;
  &lt;li&gt;request: 会为每个Http请求创建一个Bean实例&lt;/li&gt;
  &lt;li&gt;session: 会为每个session创建一个Bean实例&lt;/li&gt;
  &lt;li&gt;globalSession: 会为每个全局Http Session创建一个Bean实例，该作用域仅对Portlet有效&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;spring-bean的生命周期&quot;&gt;Spring Bean的生命周期&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;创建过程
    &lt;ol&gt;
      &lt;li&gt;实例化bean&lt;/li&gt;
      &lt;li&gt;Aware(注入Bean ID, BeanFactory 和 AppCtx)&lt;/li&gt;
      &lt;li&gt;BeanPostProcessor(s).postProcessBeforeInitialization&lt;/li&gt;
      &lt;li&gt;InitializingBean(s).afterPropertiesSet&lt;/li&gt;
      &lt;li&gt;定制的Bean init方法&lt;/li&gt;
      &lt;li&gt;BeanPOstProcessor(s).postProcessAfterInitialization&lt;/li&gt;
      &lt;li&gt;Bean初始化完毕&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;销毁过程
    &lt;ol&gt;
      &lt;li&gt;若实现了DisposableBean接口，则会调用destroy方法&lt;/li&gt;
      &lt;li&gt;若配置了destry-method属性， 则会调用其配置的销毁方法&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;do-you-really-understand-the-spring-autoplay&quot;&gt;Do you really understand the Spring autoplay&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;关注点分离：不同的问题交给不同的部分去解决&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;面向切面编程AOP正是此种技术的体现&lt;/li&gt;
      &lt;li&gt;通用化功能代码的实现，对应的就是所谓的切面（Aspect）&lt;/li&gt;
      &lt;li&gt;业务功能代码和切面代码分开后，架构将变得高内聚低耦合&lt;/li&gt;
      &lt;li&gt;确保功能的完整性：切面最终需要被合并到业务中（Weave）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AOP的主要名词概念&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Aspect：通用功能的代码实现&lt;/li&gt;
      &lt;li&gt;Target：被植入Aspect的对象&lt;/li&gt;
      &lt;li&gt;Join Point：可以作为切入点的机会，所有方法都可以作为切入点&lt;/li&gt;
      &lt;li&gt;Pointcut：Aspect实际被应用在Join Point，支持正则&lt;/li&gt;
      &lt;li&gt;Advice：类里的方法以及这个方法如何植入到目标方法的方式&lt;/li&gt;
      &lt;li&gt;Weaving: Aop的实现过程&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Advice的种类&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;前置通知(Before)&lt;/li&gt;
      &lt;li&gt;后置通知(AfterReturning)&lt;/li&gt;
      &lt;li&gt;异常通知(AfterThrowing)&lt;/li&gt;
      &lt;li&gt;最终通知(After)&lt;/li&gt;
      &lt;li&gt;环绕通知(Around)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/images/Java_Interview_Spring.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;XXXTENTACION - Moon Rock (Prod. NextLane) Anime Music Video&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&quot;760&quot; height=&quot;428&quot; src=&quot;https://www.youtube.com/embed/XAP00Bn2TZA&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Daniel Zhang</name></author><category term="notes" /><summary type="html"></summary></entry><entry><title type="html">Java Interview Multi-thread</title><link href="http://localhost:4001/notes/Java_Interview_Multi-thread/" rel="alternate" type="text/html" title="Java Interview Multi-thread" /><published>2019-01-26T00:00:00+11:00</published><updated>2019-01-26T00:00:00+11:00</updated><id>http://localhost:4001/notes/Java_Interview_Multi-thread</id><content type="html" xml:base="http://localhost:4001/notes/Java_Interview_Multi-thread/">&lt;p&gt;&lt;img src=&quot;../../assets/images/JavaInterview.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;进程和线程的区别&quot;&gt;进程和线程的区别&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/images/Java_Interview_Multi-thread.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;进程是资源分配的最小单位，线程是CPU调度的最小单位&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;所有与进程相关的资源，都被记录在PCB中&lt;/li&gt;
      &lt;li&gt;进程是抢占处理机的调度单位；线程属于某个进程，共享其资源&lt;/li&gt;
      &lt;li&gt;线程只由堆栈寄存器、程序计数器和TCB组成&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Summary
    &lt;ul&gt;
      &lt;li&gt;线程不能开做独立的应用，而进程可看做独立的应用&lt;/li&gt;
      &lt;li&gt;进程有独立的地址空间，互相不影响，线程只是进程的不同执行路径&lt;/li&gt;
      &lt;li&gt;线程没有独立的地址空间，多进程的程序比多线程程序健壮&lt;/li&gt;
      &lt;li&gt;进程的切换比线程的切换开销大&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Java进程和线程的关系&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Java对操作系统提供的功能进行封装，包括进程和线程&lt;/li&gt;
      &lt;li&gt;运行一个程序会产生一个进程， 进程包含至少一个线程&lt;/li&gt;
      &lt;li&gt;每个进程对应一个JVM实例，多个线程共享JVM里的堆&lt;/li&gt;
      &lt;li&gt;Java采用单线程编程模型，程序会自动创建主线程&lt;/li&gt;
      &lt;li&gt;主线程可以创建子线程，原则上要后于子线程完成执行&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;thread中start和run的区别&quot;&gt;Thread中start和run的区别&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;调用star()方法会创建一个新的子线程并启动&lt;/li&gt;
  &lt;li&gt;run()方法只是Thread的一个普通方法的调用&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;thread和runnable的关系&quot;&gt;Thread和Runnable的关系&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Thread是实现了Runnable接口的类，使得run支持多线程&lt;/li&gt;
  &lt;li&gt;因此类的单一继承原则，推荐多使用Runnable接口&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lil Pump - Be Like Me&lt;/p&gt;
&lt;iframe width=&quot;760&quot; height=&quot;428&quot; src=&quot;https://www.youtube.com/embed/X1VAIGkKfvg&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Daniel Zhang</name></author><category term="notes" /><summary type="html"></summary></entry><entry><title type="html">Java Interview Redis</title><link href="http://localhost:4001/notes/Java_Interview_Redis/" rel="alternate" type="text/html" title="Java Interview Redis" /><published>2019-01-24T00:00:00+11:00</published><updated>2019-01-24T00:00:00+11:00</updated><id>http://localhost:4001/notes/Java_Interview_Redis</id><content type="html" xml:base="http://localhost:4001/notes/Java_Interview_Redis/">&lt;p&gt;&lt;img src=&quot;../../assets/images/JavaInterview.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;data-types&quot;&gt;Data Types&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Hash: String 元素组成的字典，适合用于储存对象
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; hmset lilei name &quot;LiLei&quot; age 26 title &quot;Senior&quot;
OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; hget lilei age
&quot;26&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; hget lilei title
&quot;Senior&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; hset lilei title &quot;Pricipal&quot;
(integer) 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; hget lilei title
&quot;Pricipal&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;List: 列表，按照String元素插入顺序排序&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; lpush mylist aaa
(integer) 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; lpush mylist bbb
(integer) 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; lpush mylist ccc
(integer) 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;取出的顺序是从后到前，类似栈

127.0.0.1:6379&amp;gt; lrange mylist 0 10
1) &quot;ccc&quot;
2) &quot;bbb&quot;
3) &quot;aaa&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Set: String 元素组成的无序集合，通过哈希表实现，不允许重复&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;(integer) 1 : 表示添加成功&lt;/li&gt;
      &lt;li&gt;(integer) 2 : 表示添加失败&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; sadd myset 111
(integer) 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; sadd myset 222
(integer) 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; sadd myset 333
(integer) 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; sadd myset 222
(integer) 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; smembers myset
1) &quot;111&quot;
2) &quot;222&quot;
3) &quot;333&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; sadd myset abc
(integer) 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; sadd myset abd
(integer) 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; sadd myset abb
(integer) 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; sadd myset abd
(integer) 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; smembers myset
1) &quot;222&quot;
2) &quot;333&quot;
3) &quot;111&quot;
4) &quot;abb&quot;
5) &quot;abc&quot;
6) &quot;abd&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Sorted Set : 通过分数来为集合中的成员进行从小到大的排序&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; zadd myzset 3 abc
(integer) 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; zadd myzset 1 abd
(integer) 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; zadd myzset 2 abb
(integer) 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; zadd myzset 2 abb
(integer) 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; zadd myzset 1 bgg
(integer) 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; zrangebyscore myzset 0 10
1) &quot;abd&quot;
2) &quot;bgg&quot;
3) &quot;abb&quot;
4) &quot;abc&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;String : 最基本的数据类型，二进制安全&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; set name &quot;redis&quot;
OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; get name
&quot;redis&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; set name &quot;memcache&quot;
OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; get name
&quot;memcache&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; get &quot;memcache&quot;
(nil)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; set count 1
OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; get count
&quot;1&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; incr count
(integer) 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; get count
&quot;2&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; get count
&quot;2&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;用于计数的HyperLogLog, 用于支持存储地理位置信息的Geo (Learn by yourself, OK!
Cause we are genius!!!)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;底层数据类型基础&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;简单动态字符串&lt;/li&gt;
      &lt;li&gt;链表&lt;/li&gt;
      &lt;li&gt;字典&lt;/li&gt;
      &lt;li&gt;跳跃表&lt;/li&gt;
      &lt;li&gt;整数集合&lt;/li&gt;
      &lt;li&gt;压缩列表&lt;/li&gt;
      &lt;li&gt;对象&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Lil Pump - “Be Like Me” ft. Lil Wayne (Official Music Video)&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&quot;957&quot; height=&quot;538&quot; src=&quot;https://www.youtube.com/embed/gJRGkvNqrY4&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Daniel Zhang</name></author><category term="notes" /><summary type="html"></summary></entry><entry><title type="html">Java Interview Database</title><link href="http://localhost:4001/notes/Java_Interview_Database/" rel="alternate" type="text/html" title="Java Interview Database" /><published>2019-01-23T00:00:00+11:00</published><updated>2019-01-23T00:00:00+11:00</updated><id>http://localhost:4001/notes/Java_Interview_Database</id><content type="html" xml:base="http://localhost:4001/notes/Java_Interview_Database/">&lt;p&gt;&lt;img src=&quot;../../assets/images/JavaInterview.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;relational-database&quot;&gt;Relational database&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;How to design a Relational Database?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;RDBMS :
    &lt;ul&gt;
      &lt;li&gt;Application instance:
        &lt;ol&gt;
          &lt;li&gt;Storage Management&lt;/li&gt;
          &lt;li&gt;Cache&lt;/li&gt;
          &lt;li&gt;SQL Parsing&lt;/li&gt;
          &lt;li&gt;Log Management&lt;/li&gt;
          &lt;li&gt;Permission Plan&lt;/li&gt;
          &lt;li&gt;Disaster-tolerant Mechanism&lt;/li&gt;
          &lt;li&gt;Index Management&lt;/li&gt;
          &lt;li&gt;Lock Management&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;Storage (File System):&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Index : Why do we should use Index? (To avoid “Full Table Scan”)&lt;/li&gt;
  &lt;li&gt;Index Data Structure:
    &lt;ul&gt;
      &lt;li&gt;Binary Tree -&amp;gt; Binary Search&lt;/li&gt;
      &lt;li&gt;B Tree&lt;/li&gt;
      &lt;li&gt;B+ Tree&lt;/li&gt;
      &lt;li&gt;Hash Map&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
—-&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;21 Savage - a lot ft. J. Cole&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&quot;728&quot; height=&quot;541&quot; src=&quot;https://www.youtube.com/embed/DmWWqogr_r8&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Daniel Zhang</name></author><category term="notes" /><summary type="html"></summary></entry><entry><title type="html">AlgoCast:0x001 回文字符串判断(Leetcode 125)</title><link href="http://localhost:4001/algorithm/AlgoCasts-0x001/" rel="alternate" type="text/html" title="AlgoCast:0x001 回文字符串判断(Leetcode 125)" /><published>2019-01-01T00:00:00+11:00</published><updated>2019-01-01T00:00:00+11:00</updated><id>http://localhost:4001/algorithm/AlgoCasts-0x001</id><content type="html" xml:base="http://localhost:4001/algorithm/AlgoCasts-0x001/">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If you like it, you can subscribe the &lt;a href=&quot;https://algocasts.io&quot;&gt;AlgoCasts&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;问题&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个题目说的是，给你一个字符串，你要判断它是否是回文字符串。字符串里只考虑字母和数字，其它的字符可以无视。另外，对于字母，可以忽略大小写。&lt;/p&gt;

&lt;p&gt;比如说，给你的字符串是：&lt;/p&gt;

&lt;p&gt;” race a E-car “&lt;/p&gt;

&lt;p&gt;只考虑字母数字并且忽略大小写，它是一个回文字符串，因此返回 true。再比如说，给你的字符串是&lt;/p&gt;

&lt;p&gt;” race a car “&lt;/p&gt;

&lt;p&gt;对比到最后，中间的 e 和 a 不相等，因此不是一个回文字符串，返回 false。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;这道题的解题思想是,两端点对称游标向中间移动,查看对称点的字符是否相等
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 判断字符是不是英文或者是不是数字
private static boolean isAlphanumeric(char c){
 return ( c &amp;gt;= 'a' &amp;amp;&amp;amp; c &amp;lt;= 'z') || (c &amp;gt;= 'A' &amp;amp;&amp;amp; c &amp;lt;= 'Z')
          || (c &amp;gt;= '0' &amp;amp;&amp;amp; c &amp;lt;= '9');   
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 查看两个字符是否相等，忽略大小写。 这里加32是因为大写字母与小写字母相差32
 private static boolean isEqualIgnoreCase(char a, char b){
        if ( a &amp;gt;= 'A' &amp;amp;&amp;amp; a &amp;lt;= 'Z') a +=32; //把大写字母变成小写字母
        if ( b &amp;gt;= 'A' &amp;amp;&amp;amp; b &amp;lt;= 'Z') b +=32;
        return a == b;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 请注意，下面的时间复杂度是 O(n), 即使有while循环
// Time: O(n), Space: O(1)
  public boolean isPalindrome(String s) {
    if (s == null || s.length() == 0) return true;

    int i = 0, j = s.length() - 1;
    //前后两个节点向中间对撞
    for (; i &amp;lt; j; ++i, --j) {
      while (i &amp;lt; j &amp;amp;&amp;amp; !isAlphanumeric(s.charAt(i))) ++i; //如果字符不是数字或英文则坐标像右移
      while (i &amp;lt; j &amp;amp;&amp;amp; !isAlphanumeric(s.charAt(j))) --j; //如果字符不是数字或英文则坐标像左移
      if (i &amp;lt; j &amp;amp;&amp;amp; !isEqualIgnoreCase(s.charAt(i), s.charAt(j))) return false; //查看对称位点的字符是否一样
    }
    return true;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Daniel Zhang</name></author><category term="algorithm" /><summary type="html">If you like it, you can subscribe the AlgoCasts</summary></entry><entry><title type="html">Big Data Hadoop MapReduce</title><link href="http://localhost:4001/notes/10Hours-Big-Data-Hadoop-MapReduce/" rel="alternate" type="text/html" title="Big Data Hadoop MapReduce" /><published>2018-11-04T00:00:00+11:00</published><updated>2018-11-04T00:00:00+11:00</updated><id>http://localhost:4001/notes/10Hours-Big-Data-Hadoop-MapReduce</id><content type="html" xml:base="http://localhost:4001/notes/10Hours-Big-Data-Hadoop-MapReduce/">&lt;p&gt;&lt;img src=&quot;../../assets/images/10hours-hadoop/007.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;kanye-west---power&quot;&gt;Kanye West - POWER&lt;/h3&gt;
&lt;iframe width=&quot;760&quot; height=&quot;428&quot; src=&quot;https://www.youtube.com/embed/L53gjP-TtGE&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Daniel Zhang</name></author><category term="notes" /><summary type="html"></summary></entry></feed>